//
// Created by XiaoLi on 25-8-14.
//

#ifndef BYTECODE_H
#define BYTECODE_H
#include <cstdint>
#include <string>


namespace lvm::bytecode
{
    constexpr uint64_t REGISTER_COUNT = 42;
    constexpr uint8_t RETURN_VALUE_REGISTER = 36;
    constexpr uint8_t BP_REGISTER = 37;
    constexpr uint8_t SP_REGISTER = 38;
    constexpr uint8_t PC_REGISTER = 39;
    constexpr uint8_t FLAGS_REGISTER = 40;
    constexpr uint8_t IDTR_REGISTER = 41;
    constexpr uint64_t ZERO_MASK = 1;
    constexpr uint64_t CARRY_MASK = 1 << 1;
    constexpr uint64_t UNSIGNED_MASK = 1 << 2;
    constexpr uint64_t PAGE_NOT_READABLE = 1 << 3;
    constexpr uint64_t PAGE_NOT_WRITABLE = 1 << 4;
    constexpr uint64_t PAGE_NOT_EXECUTABLE = 1 << 5;
    constexpr uint8_t BYTE_TYPE = 0;
    constexpr uint8_t SHORT_TYPE = 1;
    constexpr uint8_t INT_TYPE = 2;
    constexpr uint8_t LONG_TYPE = 3;
    constexpr uint8_t FLOAT_TYPE = 4;
    constexpr uint8_t DOUBLE_TYPE = 5;
    constexpr uint8_t TC_STOP = 0; // TC = Thread Control
    constexpr uint8_t TC_WAIT = 1;
    constexpr uint8_t TC_GET_REGISTER = 2;
    constexpr uint8_t TC_SET_REGISTER = 3;
    constexpr uint8_t INTERRUPT_DIVIDE_BY_ZERO = 0;
    constexpr uint8_t INTERRUPT_PAGE_ERROR = 1;
    constexpr uint8_t CONDITION_EQUAL = 1;
    constexpr uint8_t CONDITION_NOT_EQUAL = 1 << 1;
    constexpr uint8_t CONDITION_GREATER = 1 << 2;
    constexpr uint8_t CONDITION_LESS = 1 << 3;
    constexpr uint8_t CONDITION_UNSIGNED = 1 << 4;
    constexpr uint64_t SYSCALL_TEST = 0;
    constexpr uint64_t SYSCALL_LOAD_NATIVE_LIBRARY = 1;
    constexpr uint64_t SYSCALL_LOAD_NATIVE_LIBRARY_SYMBOL = 2;
    constexpr uint64_t SYSCALL_LOAD_DYNAMIC_LIBRARY = 3;
    constexpr uint64_t SYSCALL_TEST_PRINT_INT = 0;

    constexpr uint8_t NOP = 0x00;
    constexpr uint8_t PUSH_1 = 0x01;
    constexpr uint8_t PUSH_2 = 0x02;
    constexpr uint8_t PUSH_4 = 0x03;
    constexpr uint8_t PUSH_8 = 0x04;
    constexpr uint8_t POP_1 = 0x05;
    constexpr uint8_t POP_2 = 0x06;
    constexpr uint8_t POP_4 = 0x07;
    constexpr uint8_t POP_8 = 0x08;
    constexpr uint8_t LOAD_1 = 0x09;
    constexpr uint8_t LOAD_2 = 0x0a;
    constexpr uint8_t LOAD_4 = 0x0b;
    constexpr uint8_t LOAD_8 = 0x0c;
    constexpr uint8_t STORE_1 = 0x0d;
    constexpr uint8_t STORE_2 = 0x0e;
    constexpr uint8_t STORE_4 = 0x0f;
    constexpr uint8_t STORE_8 = 0x10;
    constexpr uint8_t CMP = 0x11;
    constexpr uint8_t ATOMIC_CMP = 0x12;
    constexpr uint8_t MOV_E = 0x13;
    constexpr uint8_t MOV_NE = 0x14;
    constexpr uint8_t MOV_L = 0x15;
    constexpr uint8_t MOV_LE = 0x16;
    constexpr uint8_t MOV_G = 0x17;
    constexpr uint8_t MOV_GE = 0x18;
    constexpr uint8_t MOV_UL = 0x19;
    constexpr uint8_t MOV_ULE = 0x1a;
    constexpr uint8_t MOV_UG = 0x1b;
    constexpr uint8_t MOV_UGE = 0x1c;
    constexpr uint8_t MOV = 0x1d;
    constexpr uint8_t MOV_IMMEDIATE1 = 0x1e;
    constexpr uint8_t MOV_IMMEDIATE2 = 0x1f;
    constexpr uint8_t MOV_IMMEDIATE4 = 0x20;
    constexpr uint8_t MOV_IMMEDIATE8 = 0x21;
    constexpr uint8_t JUMP = 0x22;
    constexpr uint8_t JUMP_IMMEDIATE = 0x23;
    constexpr uint8_t JE = 0x24;
    constexpr uint8_t JNE = 0x25;
    constexpr uint8_t JL = 0x26;
    constexpr uint8_t JLE = 0x27;
    constexpr uint8_t JG = 0x28;
    constexpr uint8_t JGE = 0x29;
    constexpr uint8_t JUL = 0x2a;
    constexpr uint8_t JULE = 0x2b;
    constexpr uint8_t JUG = 0x2c;
    constexpr uint8_t JUGE = 0x2d;
    constexpr uint8_t MALLOC = 0x2e;
    constexpr uint8_t FREE = 0x2f;
    constexpr uint8_t REALLOC = 0x30;
    constexpr uint8_t ADD = 0x31;
    constexpr uint8_t SUB = 0x32;
    constexpr uint8_t MUL = 0x33;
    constexpr uint8_t DIV = 0x34;
    constexpr uint8_t MOD = 0x35;
    constexpr uint8_t AND = 0x36;
    constexpr uint8_t OR = 0x37;
    constexpr uint8_t XOR = 0x38;
    constexpr uint8_t NOT = 0x39;
    constexpr uint8_t NEG = 0x3a;
    constexpr uint8_t SHL = 0x3b;
    constexpr uint8_t SHR = 0x3c;
    constexpr uint8_t USHR = 0x3d;
    constexpr uint8_t INC = 0x3e;
    constexpr uint8_t DEC = 0x3f;
    constexpr uint8_t ADD_DOUBLE = 0x40;
    constexpr uint8_t SUB_DOUBLE = 0x41;
    constexpr uint8_t MUL_DOUBLE = 0x42;
    constexpr uint8_t DIV_DOUBLE = 0x43;
    constexpr uint8_t MOD_DOUBLE = 0x44;
    constexpr uint8_t ADD_FLOAT = 0x45;
    constexpr uint8_t SUB_FLOAT = 0x46;
    constexpr uint8_t MUL_FLOAT = 0x47;
    constexpr uint8_t DIV_FLOAT = 0x48;
    constexpr uint8_t MOD_FLOAT = 0x49;
    constexpr uint8_t ATOMIC_ADD = 0x4a;
    constexpr uint8_t ATOMIC_SUB = 0x4b;
    constexpr uint8_t ATOMIC_MUL = 0x4c;
    constexpr uint8_t ATOMIC_DIV = 0x4d;
    constexpr uint8_t ATOMIC_MOD = 0x4e;
    constexpr uint8_t ATOMIC_AND = 0x4f;
    constexpr uint8_t ATOMIC_OR = 0x50;
    constexpr uint8_t ATOMIC_XOR = 0x51;
    constexpr uint8_t ATOMIC_NOT = 0x52;
    constexpr uint8_t ATOMIC_NEG = 0x53;
    constexpr uint8_t ATOMIC_SHL = 0x54;
    constexpr uint8_t ATOMIC_SHR = 0x55;
    constexpr uint8_t ATOMIC_USHR = 0x56;
    constexpr uint8_t ATOMIC_INC = 0x57;
    constexpr uint8_t ATOMIC_DEC = 0x58;
    constexpr uint8_t ATOMIC_ADD_DOUBLE = 0x59;
    constexpr uint8_t ATOMIC_SUB_DOUBLE = 0x5a;
    constexpr uint8_t ATOMIC_MUL_DOUBLE = 0x5b;
    constexpr uint8_t ATOMIC_DIV_DOUBLE = 0x5c;
    constexpr uint8_t ATOMIC_MOD_DOUBLE = 0x5d;
    constexpr uint8_t ATOMIC_ADD_FLOAT = 0x5e;
    constexpr uint8_t ATOMIC_SUB_FLOAT = 0x5f;
    constexpr uint8_t ATOMIC_MUL_FLOAT = 0x60;
    constexpr uint8_t ATOMIC_DIV_FLOAT = 0x61;
    constexpr uint8_t ATOMIC_MOD_FLOAT = 0x62;
    constexpr uint8_t CAS = 0x63;
    constexpr uint8_t INVOKE = 0x64;
    constexpr uint8_t INVOKE_IMMEDIATE = 0x65;
    constexpr uint8_t RETURN = 0x66;
    constexpr uint8_t INTERRUPT = 0x67;
    constexpr uint8_t INTERRUPT_RETURN = 0x68;
    constexpr uint8_t INT_TYPE_CAST = 0x69;
    constexpr uint8_t LONG_TO_DOUBLE = 0x6a;
    constexpr uint8_t DOUBLE_TO_LONG = 0x6b;
    constexpr uint8_t DOUBLE_TO_FLOAT = 0x6c;
    constexpr uint8_t FLOAT_TO_DOUBLE = 0x6d;
    constexpr uint8_t OPEN = 0x6e;
    constexpr uint8_t CLOSE = 0x6f;
    constexpr uint8_t READ = 0x70;
    constexpr uint8_t WRITE = 0x71;
    constexpr uint8_t CREATE_FRAME = 0x72;
    constexpr uint8_t DESTROY_FRAME = 0x73;
    constexpr uint8_t EXIT = 0x74;
    constexpr uint8_t EXIT_IMMEDIATE = 0x75;
    constexpr uint8_t GET_FIELD_ADDRESS = 0x76;
    constexpr uint8_t GET_LOCAL_ADDRESS = 0x77;
    constexpr uint8_t GET_PARAMETER_ADDRESS = 0x78;
    constexpr uint8_t CREATE_THREAD = 0x79;
    constexpr uint8_t THREAD_CONTROL = 0x7a;
    constexpr uint8_t LOAD_FIELD = 0x7b;
    constexpr uint8_t STORE_FIELD = 0x7c;
    constexpr uint8_t LOAD_LOCAL = 0x7d;
    constexpr uint8_t STORE_LOCAL = 0x7e;
    constexpr uint8_t LOAD_PARAMETER = 0x7f;
    constexpr uint8_t STORE_PARAMETER = 0x80;
    constexpr uint8_t JUMP_IF_TRUE = 0x81;
    constexpr uint8_t JUMP_IF_FALSE = 0x82;
    constexpr uint8_t SYSCALL = 0x83;
    constexpr uint8_t THREAD_FINISH = 0x84;
    constexpr uint8_t NEG_DOUBLE = 0x85;
    constexpr uint8_t NEG_FLOAT = 0x86;
    constexpr uint8_t ATOMIC_NEG_DOUBLE = 0x87;
    constexpr uint8_t ATOMIC_NEG_FLOAT = 0x88;
    constexpr uint8_t JUMP_IF = 0x89;
    constexpr uint8_t INVOKE_NATIVE = 0x8a;

    std::string_view getInstructionName(uint8_t code);
    uint8_t parseInstructionCode(const std::string& code);
}

#endif //BYTECODE_H
